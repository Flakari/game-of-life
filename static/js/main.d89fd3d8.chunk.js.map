{"version":3,"sources":["components/GridTile/GridTile.js","containers/GameGrid/GameGrid.js","components/GameMenu/GameMenu.js","containers/GameContainer/GameContainer.js","App.js","serviceWorker.js","index.js"],"names":["GridTile","props","className","live","GameGrid","useState","displayGrid","setDisplayGrid","container","useRef","useEffect","counter","flatGrid","grid","flat","map","item","key","active","width","window","getComputedStyle","current","getPropertyValue","style","height","Number","replace","innerWidth","id","ref","GameMenu","generations","onClick","toggle","running","reset","clear","GameContainer","setGrid","gameRunning","setGameRunning","clearBoard","setClearBoard","setGenerations","buildNewGrid","generateActiveTiles","funcGrid","row","length","tile","activeTiles","checkAdjecentTiles","range","slice","createGrid","array","i","push","j","newGrid","Math","random","resetGame","advanceGameTimer","gameGrid","tempGrid","JSON","parse","stringify","aliveCount","filter","advanceGame","timer","setInterval","clearInterval","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d89fd3d8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './GridTile.css';\r\n\r\nfunction GridTile(props) { \r\n    return (\r\n        <div className={props.live ? 'tile live': 'tile'} />\r\n    ) \r\n};\r\n\r\nexport default GridTile;\r\n","import React, { useState, useEffect, useRef } from 'react';\r\nimport './GameGrid.css';\r\nimport GridTile from '../../components/GridTile/GridTile';\r\n\r\nfunction GameGrid(props) {\r\n    const [displayGrid, setDisplayGrid] = useState([]);\r\n    const container = useRef(null);\r\n\r\n    useEffect(() => {\r\n        let counter = -1;\r\n        const flatGrid = props.grid.flat();\r\n        // console.log(flatGrid)\r\n        setDisplayGrid(flatGrid.map(item => {\r\n            counter++;\r\n            return (\r\n                <GridTile\r\n                    key={counter}\r\n                    live={item === 2}\r\n                    active={item === 1}\r\n                />\r\n            );\r\n        }));\r\n        // props.addHistory(props.createHistory(flatGrid));\r\n    }, [ props.grid ]);\r\n\r\n    useEffect(() => {\r\n        const width = window.getComputedStyle(container.current).getPropertyValue('width');\r\n        container.current.style.height = (Number(width.replace('px', '')) * (450/690)) + 'px';\r\n        // container.current.style.transform = `scaley(${Number(width.replace('px', '')) / 690})`;\r\n      \r\n    }, [window.innerWidth]);\r\n\r\n    return (\r\n        <div \r\n            id=\"game-grid\"\r\n            ref={container}\r\n        >\r\n            {displayGrid}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameGrid;\r\n","import React from 'react';\r\nimport './GameMenu.css';\r\n\r\nfunction GameMenu(props) {\r\n    return (\r\n        <div id=\"menu\">\r\n            <h2>Generation</h2>\r\n            <p>{props.generations}</p>\r\n            <button onClick={props.toggle}>{!props.running ? 'Start' : 'Stop'}</button>\r\n            <button onClick={props.reset}>Reset</button>\r\n            <button onClick={props.clear}>Clear</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default GameMenu;\r\n","import React, { useState, useEffect } from 'react';\r\nimport GameGrid from '../GameGrid/GameGrid';\r\nimport GameMenu from '../../components/GameMenu/GameMenu';\r\n\r\nfunction GameContainer() {\r\n    const [grid, setGrid] = useState([]);\r\n    const [gameRunning, setGameRunning] = useState(true);\r\n    const [clearBoard, setClearBoard] = useState(false);\r\n    // const [history, setHistory] = useState([]);\r\n    const [generations, setGenerations] = useState(0);\r\n\r\n    useEffect(() => {\r\n        buildNewGrid();\r\n    }, []);\r\n\r\n    /*const createHistory = (grid) => {\r\n        const strGrid = grid.map(item => {\r\n            return item.live ? 'T' : 'F';\r\n        });\r\n        // console.log(strGrid.join(''));\r\n\r\n        let condensedStr = '';\r\n        let currentLetter = strGrid[0];\r\n        let charCount = 0;\r\n\r\n        for (let letter of strGrid) {\r\n            if (letter === currentLetter) {\r\n                charCount++;\r\n            } else {\r\n                condensedStr += charCount > 1 ? `${charCount}${currentLetter}` : currentLetter;\r\n                currentLetter = letter;\r\n                charCount = 1;\r\n            }\r\n        }\r\n        condensedStr += charCount > 1 ? `${charCount}${currentLetter}` : currentLetter;\r\n        return condensedStr;\r\n    }*/\r\n\r\n    const advanceGame = gameGrid => {\r\n        const dead = 0, active = 1, live = 2;\r\n\r\n        let tempGrid = JSON.parse(JSON.stringify(gameGrid));\r\n        for (let i = 0; i < gameGrid.length; i++) {\r\n            for (let j = 0; j < gameGrid[0].length; j++) {\r\n                let aliveCount = 0;\r\n                if (gameGrid[i][j] === active || gameGrid[i][j] === live) {\r\n                    aliveCount = checkAdjecentTiles(i, j, gameGrid)[2].filter(item => item[2] === 2).length;\r\n\r\n                    if (gameGrid[i][j] === live && (aliveCount < 2 || aliveCount > 3)) {\r\n                        tempGrid[i][j] = active;\r\n                    } else if (gameGrid[i][j] === active && aliveCount === 3) {\r\n                        tempGrid[i][j] = live;\r\n                    } else if (aliveCount === 0) {\r\n                        tempGrid[i][j] = dead;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        generateActiveTiles(tempGrid);\r\n        setGrid(tempGrid);\r\n    };\r\n\r\n    const generateActiveTiles = funcGrid => {\r\n        const dead = 0, active = 1, live = 2;\r\n\r\n        for (let row = 0; row < funcGrid.length; row++) {\r\n            for (let tile = 0; tile < funcGrid[row].length; tile++) {\r\n                if (funcGrid[row][tile] === live) {\r\n                    const activeTiles = checkAdjecentTiles(row, tile, funcGrid);\r\n                    for (let tile of activeTiles[2]) {\r\n                        if (tile[2] === dead) {\r\n                            funcGrid[tile[0]][tile[1]] = active;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return funcGrid\r\n    };\r\n\r\n    const checkAdjecentTiles = (row, tile, grid) => {\r\n        // Clockwise Order: [Right, Bottom Right, Bottom, Bottom Left, Left, Top Left, Top, Top Right]\r\n        const range = [\r\n            [row, tile + 1], [row + 1, tile + 1], [row + 1, tile], [row + 1, tile - 1], [row, tile - 1], \r\n            [row - 1, tile -1], [row - 1, tile], [row - 1, tile + 1]\r\n        ];\r\n        if (row === 0) {\r\n            if (tile === 0) {\r\n                //check everything to right and bottom of tile\r\n                return [row, tile, range.slice(0, 3).map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } else if (tile === grid[0].length - 1) {\r\n                //check everything to left and bottom of tile\r\n                return [row, tile, range.slice(2, 5).map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } else {\r\n                //check everything except for top of tile\r\n                return [row, tile, range.slice(0, 5).map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } \r\n        } else if (row === grid.length - 1) {\r\n            if (tile === 0) {\r\n                //check everything to right and top of tile\r\n                return [row, tile, [...range.slice(6), range[0]].map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } else if (tile === grid[0].length - 1) {\r\n                //check everything to left and top of tile\r\n                return [row, tile, range.slice(4, 7).map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } else {\r\n                //check everything except for bottom\r\n                return [row, tile, [...range.slice(4), range[0]].map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } \r\n        } else {\r\n            if (tile === 0) {\r\n                //check everything but left tiles\r\n                return [row, tile, [...range.slice(6), ...range.slice(0, 3)].map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } else if (tile === grid[0].length - 1) {\r\n                //check everything but right tiles\r\n                return [row, tile, range.slice(2, 7).map(item => {\r\n                    return [item[0], item[1],grid[item[0]][item[1]]];\r\n                })];\r\n            } else {\r\n                //check all tiles\r\n                return [row, tile, range.map(item => {\r\n                    return [item[0], item[1], grid[item[0]][item[1]]];\r\n                })];\r\n            } \r\n        }\r\n    };\r\n\r\n    const createGrid = () => {\r\n        const array = [];\r\n        for(let i = 0; i < 30; i++) {\r\n            array.push([]);\r\n            for(let j = 0; j < 46; j++) {\r\n                array[i].push(0);\r\n            }\r\n        }\r\n        return array;\r\n    }\r\n\r\n    const buildNewGrid = () => {\r\n        // 0 = dead, 1 = active, 2 = alive\r\n        let newGrid = createGrid();\r\n        for (let row of newGrid) {\r\n            for (let i = 0; i < row.length; i++) {\r\n                if (Math.random() > 0.4) {\r\n                    row[i] = 2;\r\n                }\r\n            }\r\n        }\r\n        newGrid = generateActiveTiles(newGrid);\r\n        setGrid(newGrid);\r\n    }\r\n\r\n    const resetGame = () => {\r\n        buildNewGrid();\r\n        // setHistory([]);\r\n        setGenerations(0);\r\n        if (clearBoard) setClearBoard(false);\r\n        if (!gameRunning) setGameRunning(true);\r\n    }\r\n\r\n    const clearGame = () => {\r\n        setGrid(createGrid);\r\n        setGenerations(0);\r\n        if (gameRunning) setGameRunning(false);\r\n        if (!clearBoard) setClearBoard(true);\r\n    }\r\n   \r\n    const advanceGameTimer = () => {\r\n        setGrid(grid => advanceGame(grid));\r\n        setGenerations(generations => generations + 1);\r\n    }\r\n\r\n    useEffect(() => {\r\n        let timer = null;\r\n        if (gameRunning && !clearBoard) {\r\n            timer = setInterval(advanceGameTimer, 75);\r\n        } else {\r\n            clearInterval(timer);\r\n        }\r\n        return () => clearInterval(timer);\r\n    }, [gameRunning]);\r\n\r\n    const gameToggle = () => {\r\n        if (clearBoard) resetGame();\r\n        setGameRunning(!gameRunning);\r\n    };\r\n\r\n    /*const addToHistory = str => {\r\n        const tempHistory = JSON.parse(JSON.stringify(history));\r\n        if (str !== 'undefined') tempHistory.push(str);\r\n        setHistory(tempHistory);\r\n    }*/\r\n\r\n    return (\r\n        <main>\r\n            <GameGrid \r\n                grid={grid}\r\n            />\r\n            <GameMenu \r\n                generations={generations}\r\n                toggle={gameToggle}\r\n                reset={resetGame}\r\n                clear={clearGame}\r\n                running={gameRunning}\r\n            />\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default GameContainer;\r\n\r\n/*\r\n    <GameMenu>\r\n        <GenerationCounter />\r\n        <History />\r\n        <StartStop />\r\n        <Reset />\r\n    </GameMenu>\r\n*/\r\n","import React from 'react';\nimport './App.css';\nimport GameContainer from './containers/GameContainer/GameContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Conway's Game of Life</h1>\n      <GameContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}